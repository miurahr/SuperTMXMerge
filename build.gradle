plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'eclipse'
    id "com.palantir.git-version" version "0.13.0"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

group = 'tokyo.northside'

if (versionDetails().isCleanTag) {
    // drop first 'v' from version tag
    version = gitVersion().substring(1)
} else {
    version = versionDetails().lastTag.substring(1) + '-' + versionDetails().commitDistance + '-' + versionDetails().gitHash + '-SNAPSHOT'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
//        vendor = JvmVendorSpec.ADOPTIUM
    }
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jdesktop:beansbinding:1.2.1'
    implementation 'com.googlecode.java-diff-utils:diffutils:1.2.1'
    testImplementation 'junit:junit:4.13.1'
}

sourceSets {
    test {
        resources {
            srcDir 'src/main/resources'
        }
    }
}

jar {
    exclude 'org/omegat/**'
}

task genJAXB(type: Exec) {
    // See https://discuss.gradle.org/t/how-can-i-compile-generated-sources/7541
    outputs.dir file('src/main/java/gen')
    def xjbFile = file('src/main/resources/gen/core/tmx14/tmx14.xjb')
    def xsdFile = file('src/main/resources/gen/core/tmx14/tmx14.xsd')
    commandLine 'xjc', '-no-header', '-d', 'src/main/java', '-p', 'gen.core.tmx14', '-b', xjbFile.path, xsdFile.path
}
compileJava.source genJAXB.outputs.files, sourceSets.main.java

javadoc {
    failOnError = false
    exclude 'org/omegat/**'
    (options as StandardJavadocDocletOptions).addBooleanOption("Xdoclint:none", true)
    (options as StandardJavadocDocletOptions).addStringOption("Xmaxwarns", "1")
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll '-Xlint', '-Werror'
}

sourcesJar {
    exclude 'org/omegat/**'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        mavenJava(MavenPublication) { publication ->
            groupId = 'tokyo.northside'
            artifactId = 'supertmxmerge'
            from components.java

            pom {
                name = 'SuperTMXMerge'
                description = 'A diff & merge library for TMX files'
                url = 'https://github.com/miurahr/SuperTMXMerge'
                scm {
                    connection = 'scm:git:https://github.com/miurahr/SuperTMXMerge'
                    developerConnection = 'scm:git:https://github.com/miurahr/SuperTMXMerge'
                    url = 'https://github.com/miurahr/SuperTMXMerge.git'
                }
                licenses {
                    license {
                        name = 'GNU Lesser General Public License, version 2.1'
                        url = 'https://www.gnu.org/licenses/lgpl-2.1.html'
                    }
                }
                developers {
                    developer {
                        id = 'amake'
                        name = 'Aaron Madlon-Kay'
                        email = 'aaron@madlon-kay.com'
                    }
                    developer {
                        id = 'miurahr'
                        name = 'Hiroshi Miura'
                        email = 'miurahr@linux.com'
                    }
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = project.hasProperty('sonatypeUsername') ? project.property('sonatypeUsername') : System.getenv('SONATYPE_USER')
            password = project.hasProperty('sonatypePassword') ? project.property('sonatypePassword') : System.getenv('SONATYPE_PASS')
        }
    }
}

signing {
    if (project.hasProperty("signingKey")) {
        def signingKey = findProperty("signingKey").toString()
        def signingPassword = findProperty("signingPassword").toString()
        useInMemoryPgpKeys(signingKey, signingPassword)
    } else {
        useGpgCmd()
    }
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    def hasKey = project.hasProperty("signingKey") || project.hasProperty("signing.gnupg.keyName")
    onlyIf { hasKey && versionDetails().isCleanTag }
}
